# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FbWLXJL55rpzmsCBXd9BeVRasgkbPAQU
"""

import streamlit as st
import tensorflow as tf
from PIL import Image, ImageOps
import numpy as np
import requests
import os

# Function to download the model from GitHub
def import_and_predict(image_data, model):
    size = (28, 28)  # Target image size for Fashion MNIST
    try:
        # Use Image.Resampling.LANCZOS for high-quality downsampling
        image = ImageOps.fit(image_data, size, Image.Resampling.LANCZOS)
        image = ImageOps.grayscale(image)  # Convert image to grayscale
        img = np.asarray(image)
        img = img / 255.0  # Normalize the image
        img_reshape = img[np.newaxis, ..., np.newaxis]  # Add batch and channel dimensions
        prediction = model.predict(img_reshape)
        return prediction
    except Exception as e:
        st.error(f"Error processing image: {e}")
        return None

# Revised load_model function with error handling
def load_model():
    model_path = download_model()
    try:
        model = tf.keras.models.load_model(model_path)
    return model
    except OSError as e:
        st.error(f"Error loading model: {e}")
        return None

model = load_model()

if model is not None:
    st.write("# Fashion Item Detection System by Oliver Dulay")

    file = st.file_uploader("Choose a fashion item photo from your computer", type=["jpg", "png"])

    def import_and_predict(image_data, model):
        size = (28, 28)  # Target image size for Fashion MNIST
    try:
        # Use Image.Resampling.LANCZOS for high-quality downsampling
        image = ImageOps.fit(image_data, size, Image.Resampling.LANCZOS)
        image = ImageOps.grayscale(image)  # Convert image to grayscale
        img = np.asarray(image)
        img = img / 255.0  # Normalize the image
        img_reshape = img[np.newaxis, ..., np.newaxis]  # Add batch and channel dimensions
        prediction = model.predict(img_reshape)
            return prediction
    except Exception as e:
        st.error(f"Error processing image: {e}")
        return None

    if file is None:
        st.text("Please upload an image file.")
    else:
        try:
            image = Image.open(file)
            st.image(image, use_column_width=True)
            prediction = import_and_predict(image, model)
            if prediction is not None:
                class_names = [
                    'T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
                    'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot'
                ]
                result_text = "OUTPUT: " + class_names[np.argmax(prediction)]
                st.success(result_text)
            else:
                st.error("Prediction could not be made.")
        except Exception as e:
            st.error(f"Error opening or processing the image file: {e}")
else:
    st.error("Model could not be loaded.")

